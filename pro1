# python1

import matplotlib.pyplot as plt
from sklearn.datasets import fetch_openml
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
from sklearn.metrics import cohen_kappa_score
from sklearn.metrics import roc_auc_score
from sklearn.metrics import confusion_matrix
import numpy as np
import pandas as pd





df =pd.read_csv("/content/diabetes.csv")
print(df.shape)
df.describe().transpose()
X, y = fetch_openml('diabetes', version=1, return_X_y=True)

X_train, X_test = X[:500], X[500:]
y_train, y_test = y[:500], y[500:]



mlp = MLPClassifier(hidden_layer_sizes=(50,), max_iter=10, alpha=1e-4,
                    solver='sgd', verbose=10,activation='relu', random_state=1,
                    learning_rate_init=.1)


mlp.fit(X_train, y_train)
print("Training set score: %f" % mlp.score(X_train, y_train))
print("Test set score: %f" % mlp.score(X_test, y_test))


y_pre = mlp.predict(X_test)


accuracy = accuracy_score(y_test, y_pre)
print('Accuracy: %f' % accuracy)
for i in np.unique(y_test):
    ytest = []
    ypre = []
    for y in y_test:
        if (y == i):
            ytest.append(1)
        else:
            ytest.append(0)
    for y in y_pre:
        if (y == i):
            ypre.append(1)
        else:
            ypre.append(0)


#precision tp / (tp + fp)
precision = precision_score(ytest, ypre)
print(i + ' Precision: %f' % precision)
# recall: tp / (tp + fn)
recall = recall_score(ytest, ypre)
print(i+' Recall: %f' % recall)
# f1: 2 tp / (2 tp + fp + fn)
f1 = f1_score(ytest, ypre)
print(i + ' F1 score: %f' % f1)
matrix = confusion_matrix(y_test, y_pre)
print(matrix)

